import { TextractServiceException as __BaseException } from "./TextractServiceException";
export class AccessDeniedException extends __BaseException {
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
    }
}
export const FeatureType = {
    FORMS: "FORMS",
    QUERIES: "QUERIES",
    SIGNATURES: "SIGNATURES",
    TABLES: "TABLES",
};
export const ContentClassifier = {
    FREE_OF_ADULT_CONTENT: "FreeOfAdultContent",
    FREE_OF_PERSONALLY_IDENTIFIABLE_INFORMATION: "FreeOfPersonallyIdentifiableInformation",
};
export const BlockType = {
    CELL: "CELL",
    KEY_VALUE_SET: "KEY_VALUE_SET",
    LINE: "LINE",
    MERGED_CELL: "MERGED_CELL",
    PAGE: "PAGE",
    QUERY: "QUERY",
    QUERY_RESULT: "QUERY_RESULT",
    SELECTION_ELEMENT: "SELECTION_ELEMENT",
    SIGNATURE: "SIGNATURE",
    TABLE: "TABLE",
    TABLE_FOOTER: "TABLE_FOOTER",
    TABLE_TITLE: "TABLE_TITLE",
    TITLE: "TITLE",
    WORD: "WORD",
};
export const EntityType = {
    COLUMN_HEADER: "COLUMN_HEADER",
    KEY: "KEY",
    SEMI_STRUCTURED_TABLE: "SEMI_STRUCTURED_TABLE",
    STRUCTURED_TABLE: "STRUCTURED_TABLE",
    TABLE_FOOTER: "TABLE_FOOTER",
    TABLE_SECTION_TITLE: "TABLE_SECTION_TITLE",
    TABLE_SUMMARY: "TABLE_SUMMARY",
    TABLE_TITLE: "TABLE_TITLE",
    VALUE: "VALUE",
};
export const RelationshipType = {
    ANSWER: "ANSWER",
    CHILD: "CHILD",
    COMPLEX_FEATURES: "COMPLEX_FEATURES",
    MERGED_CELL: "MERGED_CELL",
    TABLE: "TABLE",
    TABLE_FOOTER: "TABLE_FOOTER",
    TABLE_TITLE: "TABLE_TITLE",
    TITLE: "TITLE",
    VALUE: "VALUE",
};
export const SelectionStatus = {
    NOT_SELECTED: "NOT_SELECTED",
    SELECTED: "SELECTED",
};
export const TextType = {
    HANDWRITING: "HANDWRITING",
    PRINTED: "PRINTED",
};
export class BadDocumentException extends __BaseException {
    constructor(opts) {
        super({
            name: "BadDocumentException",
            $fault: "client",
            ...opts,
        });
        this.name = "BadDocumentException";
        this.$fault = "client";
        Object.setPrototypeOf(this, BadDocumentException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
    }
}
export class DocumentTooLargeException extends __BaseException {
    constructor(opts) {
        super({
            name: "DocumentTooLargeException",
            $fault: "client",
            ...opts,
        });
        this.name = "DocumentTooLargeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DocumentTooLargeException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
    }
}
export class HumanLoopQuotaExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "HumanLoopQuotaExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "HumanLoopQuotaExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, HumanLoopQuotaExceededException.prototype);
        this.ResourceType = opts.ResourceType;
        this.QuotaCode = opts.QuotaCode;
        this.ServiceCode = opts.ServiceCode;
        this.Message = opts.Message;
        this.Code = opts.Code;
    }
}
export class InternalServerError extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalServerError",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServerError";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerError.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
    }
}
export class InvalidParameterException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidParameterException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidParameterException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidParameterException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
    }
}
export class InvalidS3ObjectException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidS3ObjectException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidS3ObjectException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidS3ObjectException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
    }
}
export class ProvisionedThroughputExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "ProvisionedThroughputExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "ProvisionedThroughputExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ProvisionedThroughputExceededException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
    }
}
export class ThrottlingException extends __BaseException {
    constructor(opts) {
        super({
            name: "ThrottlingException",
            $fault: "server",
            ...opts,
        });
        this.name = "ThrottlingException";
        this.$fault = "server";
        Object.setPrototypeOf(this, ThrottlingException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
    }
}
export class UnsupportedDocumentException extends __BaseException {
    constructor(opts) {
        super({
            name: "UnsupportedDocumentException",
            $fault: "client",
            ...opts,
        });
        this.name = "UnsupportedDocumentException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnsupportedDocumentException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
    }
}
export const ValueType = {
    DATE: "DATE",
};
export const JobStatus = {
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
    PARTIAL_SUCCESS: "PARTIAL_SUCCESS",
    SUCCEEDED: "SUCCEEDED",
};
export class InvalidJobIdException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidJobIdException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidJobIdException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidJobIdException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
    }
}
export class InvalidKMSKeyException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidKMSKeyException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidKMSKeyException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidKMSKeyException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
    }
}
export class IdempotentParameterMismatchException extends __BaseException {
    constructor(opts) {
        super({
            name: "IdempotentParameterMismatchException",
            $fault: "client",
            ...opts,
        });
        this.name = "IdempotentParameterMismatchException";
        this.$fault = "client";
        Object.setPrototypeOf(this, IdempotentParameterMismatchException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
    }
}
export class LimitExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "LimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LimitExceededException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
    }
}
